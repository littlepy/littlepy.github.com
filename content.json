{"meta":{"title":"Littlepy","subtitle":"read seriously, or your computer will crash...","description":null,"author":"littlepy","url":"http://ganni.vip"},"pages":[{"title":"Categories","date":"2017-11-06T07:25:20.000Z","updated":"2017-11-06T07:25:20.000Z","comments":true,"path":"categories/index.html","permalink":"http://ganni.vip/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2017-11-05T09:38:21.000Z","updated":"2017-11-06T08:13:48.000Z","comments":true,"path":"about/index.html","permalink":"http://ganni.vip/about/index.html","excerpt":"","text":"Welcome to my personal blog. I’m very glad to meet u.I’am littlepy, a programmer. I love cool things.My Blog is pixel style. If u like it,you can find it at the page’s bottom.Press any key to contine. . .∎ var ele = $(\"a[href='/archives']\")[0]; $(window).bind('keypress', function(event){ele.click();});"},{"title":"Tags","date":"2017-11-06T07:29:21.000Z","updated":"2017-11-06T07:29:21.000Z","comments":true,"path":"tags/index.html","permalink":"http://ganni.vip/tags/index.html","excerpt":"","text":""},{"title":"Rss","date":"2017-11-05T09:47:08.000Z","updated":"2017-11-05T09:47:08.000Z","comments":true,"path":"rss/index.html","permalink":"http://ganni.vip/rss/index.html","excerpt":"","text":""}],"posts":[{"title":"一个简单的带日志功能的ftp客户端","slug":"一个简单的带日志功能的ftp客户端","date":"2017-11-13T00:27:56.000Z","updated":"2017-11-13T11:59:03.000Z","comments":true,"path":"2017/11/13/一个简单的带日志功能的ftp客户端/","link":"","permalink":"http://ganni.vip/2017/11/13/一个简单的带日志功能的ftp客户端/","excerpt":"几个坑参考此篇 直接配置logging，会自动生成一个root handler 12345678910import logginglogging.basicConfig(level=logging.DEBUG)formater = '%(levelname)s:%(message)s'console_handler = logging.StreamHandler()console_handler.setFormatter(logging.Formatter(formater))logging.getLogger().addHandler(console_handler)logging.info('hello,world!') #会打印两次","text":"几个坑参考此篇 直接配置logging，会自动生成一个root handler 12345678910import logginglogging.basicConfig(level=logging.DEBUG)formater = '%(levelname)s:%(message)s'console_handler = logging.StreamHandler()console_handler.setFormatter(logging.Formatter(formater))logging.getLogger().addHandler(console_handler)logging.info('hello,world!') #会打印两次 logger 应设成全局性的，否则每次调用都会产生一个，相应的日志也会重复。 123456789101112131415161718192021import loggingdef get_logger(): fmt = '%(levelname)s:%(message)s' console_handler = logging.StreamHandler() console_handler.setFormatter(logging.Formatter(fmt)) logger = logging.getLogger('App') logger.setLevel(logging.INFO) logger.addHandler(console_handler) return loggerdef call_me(): logger = get_logger() logger.info('hi')call_me()call_me()# INFO:hi# INFO:hi# INFO:hi 不要使用 root logger, 否则后续的日志，都会重复一次（就像浏览器事件里的冒泡一样） 123456789101112131415161718192021222324252627import loggingdef get_logger(): fmt = '%(levelname)s: %(message)s' console_handler = logging.StreamHandler() console_handler.setFormatter(logging.Formatter(fmt)) logger = logging.getLogger('App') logger.setLevel(logging.INFO) logger.addHandler(console_handler) return loggerdef foo(): logging.basicConfig(format='[%(name)s]: %(message)s') logging.warn('some module use root logger')def main(): logger = get_logger() logger.info('App start.') foo() logger.info('App shutdown.')main()# INFO: App start.# [root]: some module use root logger# INFO: App shutdown.# [App]: App shutdown. 具体应用：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103#!/usr/bin/pythonimport osimport sysimport ftplibimport loggingfrom logging import handlersimport optparse import datetimeformater = '%(levelname)-5s[pid:%(process)d][%(asctime)s]: %(message)s'file_handler = handlers.TimedRotatingFileHandler(filename='ftp_client.log', when='d', interval=1)file_handler.setFormatter(logging.Formatter(formater))logger = logging.getLogger('Ftp.yinlian')logger.setLevel(logging.INFO)logger.addHandler(file_handler) class Ftp(object): '''Simple ftp client.''' def __init__(self, host, user, password): self.host=host try: logger.info(\"Login to ftp server &#123;0&#125;.\".format(host)) self.ftp_client = ftplib.FTP(host=host, user=user, passwd=password) except ftplib.all_errors as e: logger.exception(\"Can't conntect to the ftp server %s.\", host) sys.exit(\"Error: can't conntect to the ftp server.\\n&#123;0&#125;\".format(e)) logger.info(\"Login successful!\") def get_file(self, remote_path, file_name, local_path): try: logger.info(\"Change to the remote dir &#123;0&#125;\".format(remote_path)) self.ftp_client.cwd(remote_path) logger.info(\"Change dir successful.\") logger.info(\"Get file &#123;0&#125;\".format(file_name)) self.ftp_client.retrbinary('RETR &#123;0&#125;'.format(file_name), open(file_name, 'wb').write) logger.info(\"File &#123;0&#125; successfully received in &#123;1&#125;.\".format(file_name, local_path)) except: logger.exception(\"Can't get file &#123;0&#125;, due to the following reseasons.\".format(file_name)) def put_file(self, remote_path, file_name, local_path): try: logger.info(\"Change to the remote dir &#123;0&#125;\".format(remote_path)) self.ftp_client.cwd(remote_path) logger.info(\"Change dir successful.\") logger.info(\"Put file &#123;0&#125;\".format(file_name)) self.ftp_client.storbinary('STOR &#123;0&#125;'.format(file_name), open(file_name, 'rb')) logger.info(\"file &#123;0&#125; successfully uploaded to &#123;1&#125;.\".format(file_name, remote_path)) except: logger.exception(\"Can't put file &#123;0&#125;, due to the following reseasons.\".format(file_name)) def quit(self): try: self.ftp_client.quit() logger.info(\"Logout ftp server &#123;0&#125;\".format(self.host)) except: logger.exception(\"Cant logout due to the following reseasons.\")if __name__ == '__main__': usage = ''' 1. &#123;0&#125; -s 192.168.43.54 -u cp -p cp -l ./ -r /files -f qq.txt 2. &#123;0&#125; -s 192.168.43.54 -u cp -p cp -l ./ -r /files -d 1 3. &#123;0&#125; -s 192.168.43.54 -u cp -p cp -l ./ -r /files -d 1 --put'''.format(__file__) parser = optparse.OptionParser(usage) parser.add_option('-s', '--server', dest='server') parser.add_option('-u', '--user', dest='user') parser.add_option('-p', '--passwd', dest='password') parser.add_option('-l', '--local_path', dest='local_path') parser.add_option('-r', '--remote_path', dest='remote_path') parser.add_option('-f', '--file', metavar='FILE', dest='file_name') parser.add_option('-d', '--days', type='int', dest='days') parser.add_option('--put', action='store_true', dest='up_load_file', default=False, help=\"Use this option if you want to uploaded files\") opt, args = parser.parse_args() if not all([opt.server, opt.user, opt.password, opt.local_path, opt.remote_path]): sys.exit(\"Not enough options, please use: '&#123;0&#125; -h' to see the usage.\".format(__file__)) if all([opt.days, opt.local_path, opt.remote_path]): today = datetime.date.today() timedelta = datetime.timedelta(days=opt.days) day = datetime.date.strftime(today - timedelta, \"%Y%m%d\") opt.file_name = \"P_03021617_&#123;0&#125;.tar.gz\".format(day) opt.local_path = os.path.join(opt.local_path, day) opt.remote_path = os.path.join(opt.remote_path, day) if not os.path.exists(opt.local_path): os.mkdir(opt.local_path) os.chdir(opt.local_path) ftp = Ftp(opt.server, opt.user, opt.password) if opt.up_load_file: ftp.put_file(opt.remote_path, opt.file_name, opt.local_path) else: ftp.get_file(opt.remote_path, opt.file_name, opt.local_path) ftp.quit()","categories":[{"name":"pytohn","slug":"pytohn","permalink":"http://ganni.vip/categories/pytohn/"}],"tags":[{"name":"python","slug":"python","permalink":"http://ganni.vip/tags/python/"},{"name":"ftp","slug":"ftp","permalink":"http://ganni.vip/tags/ftp/"}]},{"title":"C语言标准库之<assert.h>","slug":"C语言标准库之<assert.h>","date":"2017-11-09T13:43:47.000Z","updated":"2017-11-09T13:52:59.000Z","comments":true,"path":"2017/11/09/C语言标准库之<assert.h>/","link":"","permalink":"http://ganni.vip/2017/11/09/C语言标准库之<assert.h>/","excerpt":"","text":"assert 是 assert.h 中定义的一个宏 当在引入 NDEBUG 后，所有 assert 引用皆会失效 引入 NDEBUG 后， assert 的定义为： #define assert(ignore) ((void)0) 12345678910111213141516171819//#define NDEBUG 如果定义了这个宏，下面的assert 引用皆会不起作用#include &lt;assert.h&gt;#include &lt;stdio.h&gt;int main () &#123; int a; char str[50]; printf(\"Enter an integer value: \"); scanf(\"%d\", &amp;a); assert(a &gt;= 10); printf(\"Integer entered is %d\\n\", a); printf(\"Enter string: \"); scanf(\"%s\", str); assert(str != NULL); printf(\"String entered is: %s\\n\", str); return(0);&#125; #define assert(ignore) ((void)0) 中的 ignore ，意即忽略任何参数，可替换为任意字面量或置空，因为后面的宏定义没有使用这个变量。 这里的 (void)0 把0转换为一个未定义的类型，以防后续程序把 assert 当成一个常量，而误引用。 例如，当你定义 int number = (void) 0; 时， 编译器会报错： error: initializing &#39;int&#39; with an expression of incompatible type &#39;void&#39; assert 宏的具体定义，可查看 /usr/include/assert.h","categories":[{"name":"clang","slug":"clang","permalink":"http://ganni.vip/categories/clang/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://ganni.vip/tags/C语言/"}]},{"title":"C语言之从函数返回数组","slug":"C语言之从函数返回数组","date":"2017-11-09T07:47:35.000Z","updated":"2017-11-09T08:19:04.000Z","comments":true,"path":"2017/11/09/C语言之从函数返回数组/","link":"","permalink":"http://ganni.vip/2017/11/09/C语言之从函数返回数组/","excerpt":"","text":"C 语言不支持从函数直接返回数组，但是可以从函数返回指针，而我们晓得数组变量名就是指向该数组第一个元素（array[0]）的地址的指针。 C 语言的函数作用域不允许将函数内的变量返回给外部。所以，我们要用static 关键字改变数组的作用域。 示例程序如下： 123456789101112131415161718192021222324252627#include &lt;stdio.h&gt;#include &lt;time.h&gt;/* function to generate and return random numbers */int * getRandom( ) &#123; static int r[10]; int i; /* set the seed */ srand( (unsigned)time( NULL ) ); for ( i = 0; i &lt; 10; ++i) &#123; r[i] = rand(); printf( \"r[%d] = %d\\n\", i, r[i]); &#125; return r;&#125;/* main function to call above defined function */int main () &#123; /* a pointer to an int */ int *p; int i; p = getRandom(); for ( i = 0; i &lt; 10; i++ ) &#123; printf( \"*(p + %d) : %d\\n\", i, *(p + i)); &#125; return 0;&#125;","categories":[{"name":"clang","slug":"clang","permalink":"http://ganni.vip/categories/clang/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://ganni.vip/tags/C语言/"}]},{"title":"升级Openssh步骤","slug":"升级Openssh步骤","date":"2017-09-11T07:51:09.000Z","updated":"2017-11-06T06:44:39.000Z","comments":true,"path":"2017/09/11/升级Openssh步骤/","link":"","permalink":"http://ganni.vip/2017/09/11/升级Openssh步骤/","excerpt":"","text":"备份 ／lib /lib64 /usr/lib /usr/lib64 /usr/include 准备所需软件包: zlib openssl openssh 编译安装zlib 123./configure --prefix=/opt/zlibmakemake install 编译安装openssl 123./config shared --prefix=/opt/opensslmakemake install 编译安装openssh 123export LD_LIBRARY_PATH=/opt/openssl/lib/:$LD_LIBRARY_PATHexport INCLUDE=/opt/openssl/include/:$INCLUDE./configure --prefix=/opt/sshd --with-zlib=/opt/zlib/ --with-ssl-dir=/opt/openssl 设置相关环境变量 12echo \"export LD_LIBRARY_PATH=/opt/openssl/lib/:$LD_LIBRARY_PATH\" &gt;&gt; ~./bashrcsource ~/.bashrc 部署可执行文件 重启sshd","categories":[{"name":"linux_ops","slug":"linux-ops","permalink":"http://ganni.vip/categories/linux-ops/"}],"tags":[{"name":"openssl","slug":"openssl","permalink":"http://ganni.vip/tags/openssl/"},{"name":"ssh","slug":"ssh","permalink":"http://ganni.vip/tags/ssh/"},{"name":"linux","slug":"linux","permalink":"http://ganni.vip/tags/linux/"}]},{"title":"Markdown 语法和 MWeb 写作使用说明","slug":"Markdown 语法和 MWeb 写作使用说明","date":"2016-11-14T00:31:57.000Z","updated":"2017-11-06T12:34:05.000Z","comments":true,"path":"2016/11/14/Markdown 语法和 MWeb 写作使用说明/","link":"","permalink":"http://ganni.vip/2016/11/14/Markdown 语法和 MWeb 写作使用说明/","excerpt":"Markdown 的设计哲学 Markdown 的目標是實現「易讀易寫」。不過最需要強調的便是它的可讀性。一份使用 Markdown 格式撰寫的文件應該可以直接以純文字發佈，並且看起來不會像是由許多標籤或是格式指令所構成。Markdown 的語法有個主要的目的：用來作為一種網路內容的寫作用語言。","text":"Markdown 的设计哲学 Markdown 的目標是實現「易讀易寫」。不過最需要強調的便是它的可讀性。一份使用 Markdown 格式撰寫的文件應該可以直接以純文字發佈，並且看起來不會像是由許多標籤或是格式指令所構成。Markdown 的語法有個主要的目的：用來作為一種網路內容的寫作用語言。 本文约定如果有写 效果如下：， 在 MWeb 编辑状态下只有用 CMD + 4 或 CMD + R 预览才可以看效果。 标题Markdown 语法： 123# 第一级标题 `&lt;h1&gt;` ## 第二级标题 `&lt;h2&gt;` ###### 第六级标题 `&lt;h6&gt;` 效果如下： 第一级标题 &lt;h1&gt;第二级标题 &lt;h2&gt;第六级标题 &lt;h6&gt;强调Markdown 语法： 12345*这些文字会生成`&lt;em&gt;`*_这些文字会生成`&lt;u&gt;`_**这些文字会生成`&lt;strong&gt;`**__这些文字会生成`&lt;strong&gt;`__ 在 MWeb 中的快捷键为： CMD + U、CMD + I、CMD + B效果如下： 这些文字会生成&lt;em&gt;这些文字会生成&lt;u&gt; 这些文字会生成&lt;strong&gt;这些文字会生成&lt;strong&gt; 换行四个及以上空格加回车。如果不想打这么多空格，只要回车就为换行，请勾选：Preferences - Themes - Translate newlines to &lt;br&gt; tags 列表无序列表Markdown 语法： 1234* 项目一 无序列表 `* + 空格键`* 项目二* 项目二的子项目一 无序列表 `TAB + * + 空格键`* 项目二的子项目二 在 MWeb 中的快捷键为： Option + U效果如下： 项目一 无序列表 * + 空格键 项目二 项目二的子项目一 无序列表 TAB + * + 空格键 项目二的子项目二 有序列表Markdown 语法： 123451. 项目一 有序列表 `数字 + . + 空格键`2. 项目二 3. 项目三1. 项目三的子项目一 有序列表 `TAB + 数字 + . + 空格键`2. 项目三的子项目二 效果如下： 项目一 有序列表 数字 + . + 空格键 项目二 项目三 项目三的子项目一 有序列表 TAB + 数字 + . + 空格键 项目三的子项目二 任务列表（Task lists）Markdown 语法： 12- [ ] 任务一 未做任务 `- + 空格 + [ ]`- [x] 任务二 已做任务 `- + 空格 + [x]` 效果如下： 任务一 未做任务 - + 空格 + [ ] 任务二 已做任务 - + 空格 + [x] 图片Markdown 语法： 12![GitHub set up](http://zh.mweb.im/asset/img/set-up-git.gif)格式: ![Alt Text](url) Control + Shift + I 可插入Markdown语法。如果是 MWeb 的文档库中的文档，还可以用拖放图片、CMD + V 粘贴、CMD + Option + I 导入这三种方式来增加图片。效果如下： MWeb 引入的特别的语法来设置图片宽度，方法是在图片描述后加 -w + 图片宽度 即可，比如说要设置上面的图片的宽度为 140，语法如下： 链接Markdown 语法： 123email &lt;example@example.com&gt;[GitHub](http://github.com)自动生成连接 &lt;http://www.github.com/&gt; Control + Shift + L 可插入Markdown语法。如果是 MWeb 的文档库中的文档，拖放或CMD + Option + I 导入非图片时，会生成连接。效果如下： Email 连接： &#101;&#x78;&#x61;&#x6d;&#x70;&#108;&#101;&#x40;&#101;&#x78;&#x61;&#x6d;&#x70;&#x6c;&#x65;&#46;&#99;&#111;&#109;连接标题Github网站自动生成连接像： http://www.github.com/ 这样 区块引用Markdown 语法： 123某某说:&gt; 第一行引用&gt; 第二行费用文字 CMD + Shift + B 可插入Markdown语法。效果如下： 某某说: 第一行引用第二行费用文字 行内代码Markdown 语法： 1像这样即可：`&lt;addr&gt;` `code` CMD + K 可插入Markdown语法。效果如下： 像这样即可：&lt;addr&gt; code 多行或者一段代码Markdown 语法： 123456function fancyAlert(arg) &#123; if(arg) &#123; $.facebox(&#123;div:'#foo'&#125;) &#125;&#125; CMD + Shift + K 可插入Markdown语法。效果如下： 123456function fancyAlert(arg) &#123; if(arg) &#123; $.facebox(&#123;div:'#foo'&#125;) &#125;&#125; 顺序图或流程图Markdown 语法： 123张三-&gt;李四: 嘿，小四儿, 写博客了没?Note right of 李四: 李四愣了一下，说：李四--&gt;张三: 忙得吐血，哪有时间写。 12345678st=&gt;start: 开始e=&gt;end: 结束op=&gt;operation: 我的操作cond=&gt;condition: 确认？st-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 效果如下（ Preferences - Themes - Enable sequence &amp; flow chart 才会看到效果 ）： 123张三-&gt;李四: 嘿，小四儿, 写博客了没?Note right of 李四: 李四愣了一下，说：李四--&gt;张三: 忙得吐血，哪有时间写。 12345678st=&gt;start: 开始e=&gt;end: 结束op=&gt;operation: 我的操作cond=&gt;condition: 确认？st-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 更多请参考：http://bramp.github.io/js-sequence-diagrams/, http://adrai.github.io/flowchart.js/ 表格Markdown 语法： 1234第一格表头 | 第二格表头--------- | -------------内容单元格 第一列第一格 | 内容单元格第二列第一格内容单元格 第一列第二格 多加文字 | 内容单元格第二列第二格 效果如下： 第一格表头 第二格表头 内容单元格 第一列第一格 内容单元格第二列第一格 内容单元格 第一列第二格 多加文字 内容单元格第二列第二格 删除线Markdown 语法： 加删除线像这样用： 删除这些 效果如下： 加删除线像这样用： 删除这些 分隔线以下三种方式都可以生成分隔线： 12345********- - - 效果如下： MathJaxMarkdown 语法： 12345678块级公式：$$ x = \\dfrac&#123;-b \\pm \\sqrt&#123;b^2 - 4ac&#125;&#125;&#123;2a&#125; $$\\\\[ \\frac&#123;1&#125;&#123;\\Bigl(\\sqrt&#123;\\phi \\sqrt&#123;5&#125;&#125;-\\phi\\Bigr) e^&#123;\\frac25 \\pi&#125;&#125; =1+\\frac&#123;e^&#123;-2\\pi&#125;&#125; &#123;1+\\frac&#123;e^&#123;-4\\pi&#125;&#125; &#123;1+\\frac&#123;e^&#123;-6\\pi&#125;&#125;&#123;1+\\frac&#123;e^&#123;-8\\pi&#125;&#125; &#123;1+\\ldots&#125; &#125; &#125; &#125; \\\\]行内公式： $\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$ 效果如下（Preferences - Themes - Enable MathJax 才会看到效果）： 块级公式：$$ x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$ \\[ \\frac{1}{\\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\\frac25 \\pi}} =1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {1+\\frac{e^{-6\\pi}}{1+\\frac{e^{-8\\pi}} {1+\\ldots} } } } \\] 行内公式： $\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$ 脚注（Footnote）Markdown 语法： 1这是一个脚注：[^sample_footnote] 效果如下： 这是一个脚注：^sample_footnote 注释和阅读更多 Actions-&gt;Insert Read More Comment 或者 Command + .注 阅读更多的功能只用在生成网站或博客时，插入时注意要后空一行。 TOCMarkdown 语法： 1[TOC] 效果如下： [TOC]","categories":[],"tags":[{"name":"MarkDown","slug":"MarkDown","permalink":"http://ganni.vip/tags/MarkDown/"}]}]}