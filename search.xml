<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[一个简单的带日志功能的ftp客户端]]></title>
      <url>/2017/11/13/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%B8%A6%E6%97%A5%E5%BF%97%E5%8A%9F%E8%83%BD%E7%9A%84ftp%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
      <content type="html"><![CDATA[<h3 id="几个坑"><a href="#几个坑" class="headerlink" title="几个坑"></a>几个坑</h3><p><a href="http://python.jobbole.com/86887/" target="_blank" rel="external">参考此篇</a></p>
<ol>
<li><p>直接配置logging，会自动生成一个root handler</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line"></div><div class="line">logging.basicConfig(level=logging.DEBUG)</div><div class="line"></div><div class="line">formater = <span class="string">'%(levelname)s:%(message)s'</span></div><div class="line">console_handler = logging.StreamHandler()</div><div class="line">console_handler.setFormatter(logging.Formatter(formater))</div><div class="line">logging.getLogger().addHandler(console_handler)</div><div class="line"></div><div class="line">logging.info(<span class="string">'hello,world!'</span>)  <span class="comment">#会打印两次</span></div></pre></td></tr></table></figure>
</li>
<li><p>logger 应设成全局性的，否则每次调用都会产生一个，相应的日志也会重复。</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_logger</span><span class="params">()</span>:</span></div><div class="line">    fmt = <span class="string">'%(levelname)s:%(message)s'</span></div><div class="line">    console_handler = logging.StreamHandler()</div><div class="line">    console_handler.setFormatter(logging.Formatter(fmt))</div><div class="line">    logger = logging.getLogger(<span class="string">'App'</span>)</div><div class="line">    logger.setLevel(logging.INFO)</div><div class="line">    logger.addHandler(console_handler)</div><div class="line">    <span class="keyword">return</span> logger</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">call_me</span><span class="params">()</span>:</span></div><div class="line">    logger = get_logger()</div><div class="line">    logger.info(<span class="string">'hi'</span>)</div><div class="line"></div><div class="line">call_me()</div><div class="line">call_me()</div><div class="line"></div><div class="line"><span class="comment"># INFO:hi</span></div><div class="line"><span class="comment"># INFO:hi</span></div><div class="line"><span class="comment"># INFO:hi</span></div></pre></td></tr></table></figure>
</li>
<li><p>不要使用 root logger, 否则后续的日志，都会重复一次（就像浏览器事件里的冒泡一样）</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_logger</span><span class="params">()</span>:</span></div><div class="line">    fmt = <span class="string">'%(levelname)s: %(message)s'</span></div><div class="line">    console_handler = logging.StreamHandler()</div><div class="line">    console_handler.setFormatter(logging.Formatter(fmt))</div><div class="line">    logger = logging.getLogger(<span class="string">'App'</span>)</div><div class="line">    logger.setLevel(logging.INFO)</div><div class="line">    logger.addHandler(console_handler)</div><div class="line">    <span class="keyword">return</span> logger</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    logging.basicConfig(format=<span class="string">'[%(name)s]: %(message)s'</span>)</div><div class="line">    logging.warn(<span class="string">'some module use root logger'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    logger = get_logger()</div><div class="line">    logger.info(<span class="string">'App start.'</span>)</div><div class="line">    foo()</div><div class="line">    logger.info(<span class="string">'App shutdown.'</span>)</div><div class="line"></div><div class="line">main()</div><div class="line"></div><div class="line"><span class="comment"># INFO: App start.</span></div><div class="line"><span class="comment"># [root]: some module use root logger</span></div><div class="line"><span class="comment"># INFO: App shutdown.</span></div><div class="line"><span class="comment"># [App]: App shutdown.</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="具体应用："><a href="#具体应用：" class="headerlink" title="具体应用："></a>具体应用：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> ftplib</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">from</span> logging <span class="keyword">import</span> handlers</div><div class="line"><span class="keyword">import</span> optparse </div><div class="line"><span class="keyword">import</span> datetime</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">formater = <span class="string">'%(levelname)-5s[pid:%(process)d][%(asctime)s]: %(message)s'</span></div><div class="line">file_handler = handlers.TimedRotatingFileHandler(filename=<span class="string">'ftp_client.log'</span>, when=<span class="string">'d'</span>, interval=<span class="number">1</span>)</div><div class="line">file_handler.setFormatter(logging.Formatter(formater))</div><div class="line">logger = logging.getLogger(<span class="string">'Ftp.yinlian'</span>)</div><div class="line">logger.setLevel(logging.INFO)</div><div class="line">logger.addHandler(file_handler)</div><div class="line"> </div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ftp</span><span class="params">(object)</span>:</span></div><div class="line">	<span class="string">'''Simple ftp client.'''</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, host, user, password)</span>:</span></div><div class="line">		self.host=host</div><div class="line">		<span class="keyword">try</span>:</div><div class="line">			logger.info(<span class="string">"Login to ftp server &#123;0&#125;."</span>.format(host))</div><div class="line">			self.ftp_client = ftplib.FTP(host=host,</div><div class="line">				user=user, passwd=password)</div><div class="line">		<span class="keyword">except</span> ftplib.all_errors <span class="keyword">as</span> e:</div><div class="line">			logger.exception(<span class="string">"Can't conntect to the ftp server %s."</span>, host)</div><div class="line">			sys.exit(<span class="string">"Error: can't conntect to the ftp server.\n&#123;0&#125;"</span>.format(e))</div><div class="line">		logger.info(<span class="string">"Login successful!"</span>)</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">get_file</span><span class="params">(self, remote_path, file_name, local_path)</span>:</span></div><div class="line">		<span class="keyword">try</span>:</div><div class="line">			logger.info(<span class="string">"Change to the remote dir &#123;0&#125;"</span>.format(remote_path))</div><div class="line">			self.ftp_client.cwd(remote_path)</div><div class="line">			logger.info(<span class="string">"Change dir successful."</span>)</div><div class="line">			logger.info(<span class="string">"Get file &#123;0&#125;"</span>.format(file_name))</div><div class="line">			self.ftp_client.retrbinary(<span class="string">'RETR &#123;0&#125;'</span>.format(file_name),</div><div class="line">				open(file_name, <span class="string">'wb'</span>).write)</div><div class="line">			logger.info(<span class="string">"File &#123;0&#125; successfully received in &#123;1&#125;."</span>.format(file_name, local_path))</div><div class="line">		<span class="keyword">except</span>: </div><div class="line">			logger.exception(<span class="string">"Can't get file &#123;0&#125;, due to the following reseasons."</span>.format(file_name))</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">put_file</span><span class="params">(self, remote_path, file_name, local_path)</span>:</span></div><div class="line">		<span class="keyword">try</span>:</div><div class="line">			logger.info(<span class="string">"Change to the remote dir &#123;0&#125;"</span>.format(remote_path))</div><div class="line">			self.ftp_client.cwd(remote_path)</div><div class="line">			logger.info(<span class="string">"Change dir successful."</span>)</div><div class="line">			logger.info(<span class="string">"Put file &#123;0&#125;"</span>.format(file_name))</div><div class="line">			self.ftp_client.storbinary(<span class="string">'STOR &#123;0&#125;'</span>.format(file_name),</div><div class="line">				open(file_name, <span class="string">'rb'</span>))</div><div class="line">			logger.info(<span class="string">"file &#123;0&#125; successfully uploaded to &#123;1&#125;."</span>.format(file_name, remote_path))</div><div class="line">		<span class="keyword">except</span>: </div><div class="line">			logger.exception(<span class="string">"Can't put file &#123;0&#125;, due to the following reseasons."</span>.format(file_name))</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">quit</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">try</span>:</div><div class="line">			self.ftp_client.quit()</div><div class="line">			logger.info(<span class="string">"Logout ftp server &#123;0&#125;"</span>.format(self.host))</div><div class="line">		<span class="keyword">except</span>:</div><div class="line">			logger.exception(<span class="string">"Cant logout due to the following reseasons."</span>)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">	usage = <span class="string">''' 1. &#123;0&#125; -s 192.168.43.54 -u cp -p cp -l ./ -r /files -f qq.txt </span></div><div class="line"><span class="string">	2. &#123;0&#125; -s 192.168.43.54 -u cp -p cp -l ./ -r /files -d 1</span></div><div class="line"><span class="string">	3. &#123;0&#125; -s 192.168.43.54 -u cp -p cp -l ./ -r /files -d 1 --put'''</span>.format(__file__)</div><div class="line">	parser = optparse.OptionParser(usage)</div><div class="line">	parser.add_option(<span class="string">'-s'</span>, <span class="string">'--server'</span>, dest=<span class="string">'server'</span>)</div><div class="line">	parser.add_option(<span class="string">'-u'</span>, <span class="string">'--user'</span>, dest=<span class="string">'user'</span>)</div><div class="line">	parser.add_option(<span class="string">'-p'</span>, <span class="string">'--passwd'</span>, dest=<span class="string">'password'</span>)</div><div class="line">	parser.add_option(<span class="string">'-l'</span>, <span class="string">'--local_path'</span>, dest=<span class="string">'local_path'</span>)</div><div class="line">	parser.add_option(<span class="string">'-r'</span>, <span class="string">'--remote_path'</span>, dest=<span class="string">'remote_path'</span>)</div><div class="line">	parser.add_option(<span class="string">'-f'</span>, <span class="string">'--file'</span>, metavar=<span class="string">'FILE'</span>, dest=<span class="string">'file_name'</span>)</div><div class="line">	parser.add_option(<span class="string">'-d'</span>, <span class="string">'--days'</span>, type=<span class="string">'int'</span>, dest=<span class="string">'days'</span>)</div><div class="line">	parser.add_option(<span class="string">'--put'</span>, action=<span class="string">'store_true'</span>, dest=<span class="string">'up_load_file'</span>, default=<span class="keyword">False</span>,</div><div class="line">		help=<span class="string">"Use this option if you want to uploaded files"</span>)</div><div class="line">	opt, args = parser.parse_args()</div><div class="line">	<span class="keyword">if</span> <span class="keyword">not</span> all([opt.server, opt.user, opt.password, opt.local_path, opt.remote_path]):</div><div class="line">		sys.exit(<span class="string">"Not enough options, please use: '&#123;0&#125; -h' to see the usage."</span>.format(__file__))</div><div class="line">	<span class="keyword">if</span> all([opt.days, opt.local_path, opt.remote_path]):</div><div class="line">		today = datetime.date.today()</div><div class="line">		timedelta = datetime.timedelta(days=opt.days)</div><div class="line">		day = datetime.date.strftime(today - timedelta, <span class="string">"%Y%m%d"</span>)</div><div class="line">		opt.file_name = <span class="string">"P_03021617_&#123;0&#125;.tar.gz"</span>.format(day)</div><div class="line">		opt.local_path = os.path.join(opt.local_path, day)</div><div class="line">		opt.remote_path = os.path.join(opt.remote_path, day)</div><div class="line">	<span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(opt.local_path):</div><div class="line">		os.mkdir(opt.local_path)</div><div class="line">	os.chdir(opt.local_path)</div><div class="line">	ftp = Ftp(opt.server, opt.user, opt.password)</div><div class="line">	<span class="keyword">if</span> opt.up_load_file:</div><div class="line">		ftp.put_file(opt.remote_path, opt.file_name, opt.local_path)</div><div class="line">	<span class="keyword">else</span>:</div><div class="line">		ftp.get_file(opt.remote_path, opt.file_name, opt.local_path)</div><div class="line">	ftp.quit()</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> pytohn </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python </tag>
            
            <tag> ftp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C语言标准库之<assert.h>]]></title>
      <url>/2017/11/09/C%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%BA%93%E4%B9%8B%3Cassert.h%3E/</url>
      <content type="html"><![CDATA[<ul>
<li>assert 是 assert.h 中定义的一个宏</li>
<li>当在引入 NDEBUG 后，所有 assert 引用皆会失效</li>
<li>引入 NDEBUG 后， assert 的定义为： <code>#define assert(ignore) ((void)0)</code></li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//#define NDEBUG 如果定义了这个宏，下面的assert 引用皆会不起作用</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">int</span> a;</div><div class="line">   <span class="keyword">char</span> str[<span class="number">50</span>];</div><div class="line">	 </div><div class="line">   <span class="built_in">printf</span>(<span class="string">"Enter an integer value: "</span>);</div><div class="line">   <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a);</div><div class="line">   assert(a &gt;= <span class="number">10</span>);</div><div class="line">   <span class="built_in">printf</span>(<span class="string">"Integer entered is %d\n"</span>, a);</div><div class="line">    </div><div class="line">   <span class="built_in">printf</span>(<span class="string">"Enter string: "</span>);</div><div class="line">   <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str);</div><div class="line">   assert(str != <span class="literal">NULL</span>);</div><div class="line">   <span class="built_in">printf</span>(<span class="string">"String entered is: %s\n"</span>, str);</div><div class="line">	</div><div class="line">   <span class="keyword">return</span>(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>#define assert(ignore) ((void)0)</code> 中的 <strong>ignore</strong> ，意即忽略任何参数，可替换为任意字面量或置空，因为后面的宏定义没有使用这个变量。</p>
<p>这里的 <code>(void)0</code> 把0转换为一个未定义的类型，以防后续程序把 assert 当成一个常量，而误引用。</p>
<p>例如，当你定义 <code>int number = (void) 0;</code> 时， 编译器会报错：</p>
<p><code>error: initializing &#39;int&#39; with an expression of incompatible type &#39;void&#39;</code></p>
<h4 id="assert-宏的具体定义，可查看-usr-include-assert-h"><a href="#assert-宏的具体定义，可查看-usr-include-assert-h" class="headerlink" title="assert 宏的具体定义，可查看 /usr/include/assert.h"></a>assert 宏的具体定义，可查看 /usr/include/assert.h</h4>]]></content>
      
        <categories>
            
            <category> clang </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C语言之从函数返回数组]]></title>
      <url>/2017/11/09/C%E8%AF%AD%E8%A8%80%E4%B9%8B%E4%BB%8E%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E6%95%B0%E7%BB%84/</url>
      <content type="html"><![CDATA[<ol>
<li><p>C 语言不支持从函数直接返回数组，但是可以从函数返回指针，而我们晓得数组变量名就是指向该数组第一个元素（array[0]）的地址的指针。</p>
</li>
<li><p>C 语言的函数作用域不允许将函数内的变量返回给外部。所以，我们要用static 关键字改变数组的作用域。</p>
</li>
<li><p>示例程序如下：</p>
</li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">/* function to generate and return random numbers */</span></div><div class="line"><span class="function"><span class="keyword">int</span> * <span class="title">getRandom</span><span class="params">( )</span> </span>&#123;</div><div class="line">   <span class="keyword">static</span> <span class="keyword">int</span>  r[<span class="number">10</span>];</div><div class="line">   <span class="keyword">int</span> i;</div><div class="line">   <span class="comment">/* set the seed */</span></div><div class="line">   srand( (<span class="keyword">unsigned</span>)time( <span class="literal">NULL</span> ) );</div><div class="line">   <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</div><div class="line">      r[i] = rand();</div><div class="line">      <span class="built_in">printf</span>( <span class="string">"r[%d] = %d\n"</span>, i, r[i]);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> r;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* main function to call above defined function */</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</div><div class="line">   <span class="comment">/* a pointer to an int */</span></div><div class="line">   <span class="keyword">int</span> *p;</div><div class="line">   <span class="keyword">int</span> i;</div><div class="line">   p = getRandom();</div><div class="line">   <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ ) &#123;</div><div class="line">      <span class="built_in">printf</span>( <span class="string">"*(p + %d) : %d\n"</span>, i, *(p + i));</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> clang </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[升级Openssh步骤]]></title>
      <url>/2017/09/11/%E5%8D%87%E7%BA%A7Openssh%E6%AD%A5%E9%AA%A4/</url>
      <content type="html"><![CDATA[<ol>
<li>备份 ／lib /lib64 /usr/lib /usr/lib64 /usr/include</li>
<li>准备所需软件包:<ul>
<li>zlib</li>
<li>openssl</li>
<li>openssh</li>
</ul>
</li>
<li><p>编译安装zlib</p>
 <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./configure --prefix=/opt/zlib</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure>
</li>
<li><p>编译安装openssl</p>
 <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./config shared --prefix=/opt/openssl</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure>
</li>
<li><p>编译安装openssh</p>
 <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/opt/openssl/lib/:<span class="variable">$LD_LIBRARY_PATH</span></div><div class="line"><span class="built_in">export</span> INCLUDE=/opt/openssl/include/:<span class="variable">$INCLUDE</span></div><div class="line">./configure --prefix=/opt/sshd --with-zlib=/opt/zlib/ --with-ssl-dir=/opt/openssl</div></pre></td></tr></table></figure>
</li>
<li><p>设置相关环境变量</p>
 <figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"export LD_LIBRARY_PATH=/opt/openssl/lib/:<span class="variable">$LD_LIBRARY_PATH</span>"</span> &gt;&gt; ~./bashrc</div><div class="line"><span class="built_in">source</span> ~/.bashrc</div></pre></td></tr></table></figure>
</li>
<li><p>部署可执行文件</p>
</li>
<li>重启sshd</li>
</ol>
]]></content>
      
        <categories>
            
            <category> linux_ops </category>
            
        </categories>
        
        
        <tags>
            
            <tag> openssl </tag>
            
            <tag> ssh </tag>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Markdown 语法和 MWeb 写作使用说明]]></title>
      <url>/2016/11/14/Markdown%20%E8%AF%AD%E6%B3%95%E5%92%8C%20MWeb%20%E5%86%99%E4%BD%9C%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
      <content type="html"><![CDATA[<h2 id="Markdown-的设计哲学"><a href="#Markdown-的设计哲学" class="headerlink" title="Markdown 的设计哲学"></a>Markdown 的设计哲学</h2><blockquote>
<p>Markdown 的目標是實現「易讀易寫」。<br>不過最需要強調的便是它的可讀性。一份使用 Markdown 格式撰寫的文件應該可以直接以純文字發佈，並且看起來不會像是由許多標籤或是格式指令所構成。<br>Markdown 的語法有個主要的目的：用來作為一種網路內容的<em>寫作</em>用語言。</p>
</blockquote>
<a id="more"></a>
<h2 id="本文约定"><a href="#本文约定" class="headerlink" title="本文约定"></a>本文约定</h2><p>如果有写 <code>效果如下：</code>， 在 MWeb 编辑状态下只有用 <code>CMD + 4</code> 或 <code>CMD + R</code> 预览才可以看效果。</p>
<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>Markdown 语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 第一级标题 `&lt;h1&gt;` </div><div class="line">## 第二级标题 `&lt;h2&gt;` </div><div class="line">###### 第六级标题 `&lt;h6&gt;`</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<h1 id="第一级标题-lt-h1-gt"><a href="#第一级标题-lt-h1-gt" class="headerlink" title="第一级标题 &lt;h1&gt;"></a>第一级标题 <code>&lt;h1&gt;</code></h1><h2 id="第二级标题-lt-h2-gt"><a href="#第二级标题-lt-h2-gt" class="headerlink" title="第二级标题 &lt;h2&gt;"></a>第二级标题 <code>&lt;h2&gt;</code></h2><h6 id="第六级标题-lt-h6-gt"><a href="#第六级标题-lt-h6-gt" class="headerlink" title="第六级标题 &lt;h6&gt;"></a>第六级标题 <code>&lt;h6&gt;</code></h6><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p>Markdown 语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">*这些文字会生成`&lt;em&gt;`*</div><div class="line">_这些文字会生成`&lt;u&gt;`_</div><div class="line"></div><div class="line">**这些文字会生成`&lt;strong&gt;`**</div><div class="line">__这些文字会生成`&lt;strong&gt;`__</div></pre></td></tr></table></figure>
<p>在 MWeb 中的快捷键为： <code>CMD + U</code>、<code>CMD + I</code>、<code>CMD + B</code><br>效果如下：</p>
<p><em>这些文字会生成<code>&lt;em&gt;</code></em><br><em>这些文字会生成<code>&lt;u&gt;</code></em></p>
<p><strong>这些文字会生成<code>&lt;strong&gt;</code></strong><br><strong>这些文字会生成<code>&lt;strong&gt;</code></strong></p>
<h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>四个及以上空格加回车。<br>如果不想打这么多空格，只要回车就为换行，请勾选：<code>Preferences</code> - <code>Themes</code> - <code>Translate newlines to &lt;br&gt; tags</code></p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>Markdown 语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">* 项目一 无序列表 `* + 空格键`</div><div class="line">* 项目二</div><div class="line">* 项目二的子项目一 无序列表 `TAB + * + 空格键`</div><div class="line">* 项目二的子项目二</div></pre></td></tr></table></figure>
<p>在 MWeb 中的快捷键为： <code>Option + U</code><br>效果如下：</p>
<ul>
<li>项目一 无序列表 <code>* + 空格键</code></li>
<li>项目二</li>
<li>项目二的子项目一 无序列表 <code>TAB + * + 空格键</code></li>
<li>项目二的子项目二</li>
</ul>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>Markdown 语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1. 项目一 有序列表 `数字 + . + 空格键`</div><div class="line">2. 项目二 </div><div class="line">3. 项目三</div><div class="line">1. 项目三的子项目一 有序列表 `TAB + 数字 + . + 空格键`</div><div class="line">2. 项目三的子项目二</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<ol>
<li>项目一 有序列表 <code>数字 + . + 空格键</code></li>
<li>项目二 </li>
<li>项目三</li>
<li>项目三的子项目一 有序列表 <code>TAB + 数字 + . + 空格键</code></li>
<li>项目三的子项目二</li>
</ol>
<h3 id="任务列表（Task-lists）"><a href="#任务列表（Task-lists）" class="headerlink" title="任务列表（Task lists）"></a>任务列表（Task lists）</h3><p>Markdown 语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- [ ] 任务一 未做任务 `- + 空格 + [ ]`</div><div class="line">- [x] 任务二 已做任务 `- + 空格 + [x]`</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<ul>
<li style="list-style: none"><input type="checkbox"> 任务一 未做任务 <code>- + 空格 + [ ]</code></li>
<li style="list-style: none"><input type="checkbox" checked> 任务二 已做任务 <code>- + 空格 + [x]</code></li>
</ul>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>Markdown 语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">![GitHub set up](http://zh.mweb.im/asset/img/set-up-git.gif)</div><div class="line">格式: ![Alt Text](url)</div></pre></td></tr></table></figure>
<p><code>Control + Shift + I</code> 可插入Markdown语法。<br>如果是 MWeb 的文档库中的文档，还可以用拖放图片、<code>CMD + V</code> 粘贴、<code>CMD + Option + I</code> 导入这三种方式来增加图片。<br>效果如下：</p>
<p><img src="http://zh.mweb.im/asset/img/set-up-git.gif" alt="GitHub set up"></p>
<p>MWeb 引入的特别的语法来设置图片宽度，方法是在图片描述后加 <code>-w + 图片宽度</code> 即可，比如说要设置上面的图片的宽度为 140，语法如下：</p>
<p><img src="http://zh.mweb.im/asset/img/set-up-git.gif" alt="GitHub set up-w140"></p>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>Markdown 语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">email &lt;example@example.com&gt;</div><div class="line">[GitHub](http://github.com)</div><div class="line">自动生成连接  &lt;http://www.github.com/&gt;</div></pre></td></tr></table></figure>
<p><code>Control + Shift + L</code> 可插入Markdown语法。<br>如果是 MWeb 的文档库中的文档，拖放或<code>CMD + Option + I</code> 导入非图片时，会生成连接。<br>效果如下：</p>
<p>Email 连接： <a href="&#109;&#97;&#x69;&#108;&#116;&#x6f;&#x3a;&#101;&#x78;&#x61;&#x6d;&#x70;&#108;&#101;&#x40;&#101;&#x78;&#x61;&#x6d;&#x70;&#x6c;&#x65;&#46;&#99;&#111;&#109;">&#101;&#x78;&#x61;&#x6d;&#x70;&#108;&#101;&#x40;&#101;&#x78;&#x61;&#x6d;&#x70;&#x6c;&#x65;&#46;&#99;&#111;&#109;</a><br><a href="http://github.com" target="_blank" rel="external">连接标题Github网站</a><br>自动生成连接像： <a href="http://www.github.com/" target="_blank" rel="external">http://www.github.com/</a> 这样</p>
<h2 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h2><p>Markdown 语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">某某说:</div><div class="line">&gt; 第一行引用</div><div class="line">&gt; 第二行费用文字</div></pre></td></tr></table></figure>
<p><code>CMD + Shift + B</code> 可插入Markdown语法。<br>效果如下：</p>
<p>某某说:</p>
<blockquote>
<p>第一行引用<br>第二行费用文字</p>
</blockquote>
<h2 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h2><p>Markdown 语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">像这样即可：`&lt;addr&gt;` `code`</div></pre></td></tr></table></figure>
<p><code>CMD + K</code> 可插入Markdown语法。<br>效果如下：</p>
<p>像这样即可：<code>&lt;addr&gt;</code> <code>code</code></p>
<h2 id="多行或者一段代码"><a href="#多行或者一段代码" class="headerlink" title="多行或者一段代码"></a>多行或者一段代码</h2><p>Markdown 语法：</p>
<pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fancyAlert</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(arg) &#123;</div><div class="line">    $.facebox(&#123;<span class="attr">div</span>:<span class="string">'#foo'</span>&#125;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p><code>CMD + Shift + K</code> 可插入Markdown语法。<br>效果如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fancyAlert</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(arg) &#123;</div><div class="line">    $.facebox(&#123;<span class="attr">div</span>:<span class="string">'#foo'</span>&#125;)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="顺序图或流程图"><a href="#顺序图或流程图" class="headerlink" title="顺序图或流程图"></a>顺序图或流程图</h2><p>Markdown 语法：</p>
<pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">张三-&gt;李四: 嘿，小四儿, 写博客了没?</div><div class="line">Note right of 李四: 李四愣了一下，说：</div><div class="line">李四--&gt;张三: 忙得吐血，哪有时间写。</div></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">st=&gt;start: 开始</div><div class="line">e=&gt;end: 结束</div><div class="line">op=&gt;operation: 我的操作</div><div class="line">cond=&gt;condition: 确认？</div><div class="line"></div><div class="line">st-&gt;op-&gt;cond</div><div class="line">cond(yes)-&gt;e</div><div class="line">cond(no)-&gt;op</div></pre></td></tr></table></figure>
</code></pre><p>效果如下（ <code>Preferences</code> - <code>Themes</code> - <code>Enable sequence &amp; flow chart</code> 才会看到效果 ）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">张三-&gt;李四: 嘿，小四儿, 写博客了没?</div><div class="line">Note right of 李四: 李四愣了一下，说：</div><div class="line">李四--&gt;张三: 忙得吐血，哪有时间写。</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">st=&gt;start: 开始</div><div class="line">e=&gt;end: 结束</div><div class="line">op=&gt;operation: 我的操作</div><div class="line">cond=&gt;condition: 确认？</div><div class="line"></div><div class="line">st-&gt;op-&gt;cond</div><div class="line">cond(yes)-&gt;e</div><div class="line">cond(no)-&gt;op</div></pre></td></tr></table></figure>
<p>更多请参考：<a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="external">http://bramp.github.io/js-sequence-diagrams/</a>, <a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="external">http://adrai.github.io/flowchart.js/</a></p>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>Markdown 语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">第一格表头 | 第二格表头</div><div class="line">--------- | -------------</div><div class="line">内容单元格 第一列第一格 | 内容单元格第二列第一格</div><div class="line">内容单元格 第一列第二格 多加文字 | 内容单元格第二列第二格</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<table>
<thead>
<tr>
<th>第一格表头</th>
<th>第二格表头</th>
</tr>
</thead>
<tbody>
<tr>
<td>内容单元格 第一列第一格</td>
<td>内容单元格第二列第一格</td>
</tr>
<tr>
<td>内容单元格 第一列第二格 多加文字</td>
<td>内容单元格第二列第二格</td>
</tr>
</tbody>
</table>
<h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>Markdown 语法：</p>
<p>加删除线像这样用： <del>删除这些</del></p>
<p>效果如下：</p>
<p>加删除线像这样用： <del>删除这些</del></p>
<h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>以下三种方式都可以生成分隔线：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">***</div><div class="line"></div><div class="line">*****</div><div class="line"></div><div class="line">- - -</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<hr>
<hr>
<hr>
<h2 id="MathJax"><a href="#MathJax" class="headerlink" title="MathJax"></a>MathJax</h2><p>Markdown 语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">块级公式：</div><div class="line">$$	x = \dfrac&#123;-b \pm \sqrt&#123;b^2 - 4ac&#125;&#125;&#123;2a&#125; $$</div><div class="line"></div><div class="line">\\[ \frac&#123;1&#125;&#123;\Bigl(\sqrt&#123;\phi \sqrt&#123;5&#125;&#125;-\phi\Bigr) e^&#123;\frac25 \pi&#125;&#125; =</div><div class="line">1+\frac&#123;e^&#123;-2\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-4\pi&#125;&#125; &#123;1+\frac&#123;e^&#123;-6\pi&#125;&#125;</div><div class="line">&#123;1+\frac&#123;e^&#123;-8\pi&#125;&#125; &#123;1+\ldots&#125; &#125; &#125; &#125; \\]</div><div class="line"></div><div class="line">行内公式： $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$</div></pre></td></tr></table></figure>
<p>效果如下（<code>Preferences</code> - <code>Themes</code> - <code>Enable MathJax</code> 才会看到效果）：</p>
<p>块级公式：<br>$$    x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$</p>
<p>\[ \frac{1}{\Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\frac25 \pi}} =<br>1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {1+\frac{e^{-6\pi}}<br>{1+\frac{e^{-8\pi}} {1+\ldots} } } } \]</p>
<p>行内公式： $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$</p>
<h2 id="脚注（Footnote）"><a href="#脚注（Footnote）" class="headerlink" title="脚注（Footnote）"></a>脚注（Footnote）</h2><p>Markdown 语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是一个脚注：[^sample_footnote]</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p>这是一个脚注：<a href="这里是脚注信息">^sample_footnote</a></p>
<h2 id="注释和阅读更多"><a href="#注释和阅读更多" class="headerlink" title="注释和阅读更多"></a>注释和阅读更多</h2><!-- comment -->
<!-- more -->
<p>Actions-&gt;Insert Read More Comment <em>或者</em> <code>Command + .</code><br><strong>注</strong> 阅读更多的功能只用在生成网站或博客时，插入时注意要后空一行。</p>
<h2 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h2><p>Markdown 语法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[TOC]</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p>[TOC]</p>
]]></content>
      
        
        <tags>
            
            <tag> MarkDown </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
